var colors = {
        "extended": [
            "red",
            "pink",
            "purple",
            "deep-purple",
            "indigo",
            "blue",
            "light-blue",
            "cyan",
            "teal",
            "green",
            "light-green",
            "lime",
            "yellow",
            "amber",
            "orange",
            "deep-orange"
        ],
        "usual": [
            "brown",
            "grey",
            "blue-grey"
        ]
    },
    rows,
    blocks,
    flag_vertical = false, //flag used for switching display style
    flag_copy_hex = false, //flag used for switching copying classname/hex-color
    switcher_display, //used for switch vertical/horizontal displaying
    switcher_copy, //used for switch classname/color copying
    container, //used for html container
    info; //used for notifications

window.onload = function () {
    container = document.getElementById("container");
    info = document.getElementById("info");
    switcher_display = document.getElementById("switch-display");
    switcher_copy = document.getElementById("switch-copy");

    switcher_display.addEventListener("click", switchDStyle);
    switcher_copy.addEventListener("click", switchCopy);

    //Rendering color-blocks
    colors.extended.forEach(function (color) {
        //Paste extended
        pasteExtended(color);
    });

    //Now paste usual
    colors.usual.forEach(function (color) {
        pasteUsual(color);
    });

    rows = document.getElementsByClassName("row");
    blocks = document.getElementsByClassName("block");

    each(blocks, function(block){
        var this_style = getComputedStyle(block);
        block.setAttribute("data-color-hex", rgb2hex(this_style.backgroundColor));
    });

    //Activate copy to clipboard by click
    var clipboard = new Clipboard('.block');

    clipboard.on('success', function() {
        if(flag_copy_hex){
            mess.set(mess.success_hex);
        }else{
            mess.set(mess.success_class);
        }
        mess.show();
    });

    clipboard.on('error', function() {
        mess.set("Can't copy to clipboard. Please open an issue.");
        mess.show();
    });

    //Show hello info
    mess.show();
};


//Notifications functions
var mess = {
    "invisible": true,
    "success": "",
    "success_class": "Color class-name copied to your clipboard.",
    "success_hex": "Color hex copied to your clipboard.",
    hide: function(){
        addClass(info, "invisible");
        mess.invisible = true;
    },
    show: function(){
        if(mess.invisible){
            removeClass(info, "invisible");
            mess.invisible = false;
            setTimeout(function(){
                mess.hide();
            }, 3000);
        }
    },
    set: function(text){
        info.textContent = text;
    }
};
//-------------------- Functions
function pasteUsual(color) {
    var this_colors = [];
    for (var i = 50; i < 1000; i = i + 100) {
        //Paste block
        this_colors.push("mdl-color--" + color + "-" + i);

        //for first interaction
        if (i === 50) {
            i = i + 50;
        }
    }

    paste(this_colors);
}

function pasteExtended(color) {
    var this_colors = [];
    var extended = {
        1000 : 700,
        1100 : 400,
        1200 : 200,
        1300 : 100
    };

    for (var i = 50; i < 1400; i = i + 100) {
        if(i < 1000){
            this_colors.push("mdl-color--" + color + "-" + i);
        }else{
            this_colors.push("mdl-color--" + color + "-A" + extended[i]);
        }

        //for first interaction
        if (i === 50) {
            i = i - 50;
        }
    }

    paste(this_colors);
}

function paste(colors) {
    var row = document.createElement('div');
    row.className = "row flex-center";

    colors.forEach(function (color) {
        var block = document.createElement('div');
        block.className = "block " + color;
        block.setAttribute('data-clipboard-text', color);
        block.setAttribute('data-color-class', color);
        row.appendChild(block);
    });

    container.appendChild(row);
}
//Displaying style switcher
function switchDStyle(){
    if(flag_vertical){
        removeClass(container, "flex-center");
        removeClass(container, "flex-vertical-center");
        removeClass(container, "container-vertical");

        //rows
        each(rows, function(this_row){
            addClass(this_row, "flex-center");
        });
    }else{
        addClass(container, "flex-center");
        addClass(container, "flex-vertical-center");
        addClass(container, "container-vertical");

        //rows
        each(rows, function(this_row){
            removeClass(this_row, "flex-center");
        });
    }
    flag_vertical = !flag_vertical;
}

//Copying switcher
function switchCopy(){
    if(flag_copy_hex){
        each(blocks, function(block){
            block.setAttribute('data-clipboard-text', block.getAttribute('data-color-class'));
        });
    }else{
        each(blocks, function(block){
            block.setAttribute('data-clipboard-text', block.getAttribute('data-color-hex'));
        });
    }
    flag_copy_hex = !flag_copy_hex;
}
//Vanilla.js functions
function each(elements, callback){
    Array.prototype.forEach.call(elements, function(el){
        callback(el);
    });
}

function addClass(el, className){
    if (el.classList)
        el.classList.add(className);
    else
        el.className += ' ' + className;
}

function removeClass(el, className){
    if (el.classList)
        el.classList.remove(className);
    else
        el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
}

function rgb2hex(rgb) {
    if (/^#[0-9A-F]{6}$/i.test(rgb)) return rgb;

    rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
    function hex(x) {
        return ("0" + parseInt(x).toString(16)).slice(-2);
    }
    return "#" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);
}